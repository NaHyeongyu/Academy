fetch의 장점

표준 API : fetch는 브라우저 내장 API로, jQuery 없이도 사용할 수 있다.

             최신 표준을 따르기 때문에 앞으로도 유지보수와 호환성이 좋다.

모던 자바스크립트와 호환 : fetch는 Promise 기반이므로 async/await를 사용해 더 깔끔한 코드 작성이 가능하다.

                                  모던 프레임워크(React, Vue, Angular)와 잘 어울린다.

가벼운 코드 :  jQuery 라이브러리를 불러오지 않아도 되므로 파일 크기가 작아지고 성능이 향상될 수 있다.

​

$.ajax의 장점

풍부한 기능 :  $.ajax는 기본적으로 많은 옵션을 제공하여 복잡한 요청

	      (예: 동기/비동기 설정, 타임아웃, 캐싱, 다양한 데이터 형식 처리 등)을 쉽게 다룰 수 있다.

광범위한 지원 : 오래된 브라우저를 포함한 다양한 환경에서 동작한다. (예: IE11 이하)

플러그인/기존 코드 호환성 : jQuery 기반의 기존 프로젝트나 플러그인과 함께 작업할 때 $.ajax를 사용하는 것이 더 간편할 수 있다.

​







fetch를 추천하는 경우:   새 프로젝트에서 최신 기술 스택(React, Vue, Angular 등)을 사용하는 경우.

	                jQuery 라이브러리가 필요 없는 환경.
		
                           코드 간결성과 가벼운 성능을 우선시할 때.

​

​

$.ajax를 추천하는 경우:   기존에 jQuery를 사용하는 레거시 코드와 호환이 필요한 경우.

                               브라우저 호환성(구형 브라우저 지원)이 중요한 경우.

                               짧은 시간에 빠르게 기능을 추가해야 할 때.

​

새로운 프로젝트에서는 fetch를 사용하는 것이 더 적합하며, 이는 가볍고 유지보수가 용이하다. 

하지만 기존 프로젝트가 jQuery를 사용하고 있다면  사용하는 것이 더 효율적일 수 있다.

​

​

​

​

​

--------------------------

​

DOMContentLoaded 이벤트란?

 HTML 문서의 모든 요소(태그)가 로드되었을 때 실행되는 이벤트

이미지, CSS, 외부 스크립트 등의 리소스가 로드될 필요 없이 실행

​